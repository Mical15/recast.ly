import App from '../../src/components/App.js';
describe('App', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = ReactTestUtils;
  var app;
  beforeEach(function () {
    app = renderIntoDocument( /*#__PURE__*/React.createElement(App, {
      searchYouTube: () => {}
    }));
  });
  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });
  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });
  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });
  it('should update the video player when a video entry\'s title is clicked', function () {
    // This test will only works once `App` is refactored into a stateful class component
    // because `renderIntoDocument` does not work with stateless class components
    expect(React.Component.isPrototypeOf(App)).to.be.true;
    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
    videoEntryTitleElements.forEach(videoEntryTitle => {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3'); // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description

      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });
  describe('when rendering live data from YouTube', function () {
    var searchYouTubeStub;
    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.yields(window.fakeVideoData);
      app = renderIntoDocument( /*#__PURE__*/React.createElement(App, {
        searchYouTube: searchYouTubeStub
      }));
    });
    it('should call `searchYouTube` when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
    });
    it('should load live data when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0VGVzdFV0aWxzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiUmVhY3QiLCJDb21wb25lbnQiLCJpc1Byb3RvdHlwZU9mIiwidG8iLCJiZSIsInRydWUiLCJ2aWRlb1BsYXllciIsImV4aXN0IiwidmlkZW9MaXN0IiwidmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiLCJmb3JFYWNoIiwidmlkZW9FbnRyeVRpdGxlIiwiY2xpY2siLCJwbGF5ZXIiLCJwbGF5ZXJUaXRsZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lckhUTUwiLCJlcXVhbCIsInNlYXJjaFlvdVR1YmVTdHViIiwic2lub24iLCJzdHViIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsImNhbGxlZCIsImkiLCJzbmlwcGV0IiwidGl0bGUiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEdBQVAsTUFBZ0IsNkJBQWhCO0FBRUFDLFFBQVEsQ0FBQyxLQUFELEVBQVEsWUFBVztBQUN6QixNQUFJO0FBQ0ZDLElBQUFBLFFBREU7QUFFRkMsSUFBQUEsa0JBRkU7QUFHRkMsSUFBQUEsaUNBSEU7QUFJRkMsSUFBQUE7QUFKRSxNQUtBQyxjQUxKO0FBT0EsTUFBSUMsR0FBSjtBQUVBQyxFQUFBQSxVQUFVLENBQUMsWUFBVztBQUNwQkQsSUFBQUEsR0FBRyxHQUFHSixrQkFBa0IsZUFDdEIsb0JBQUMsR0FBRDtBQUFLLE1BQUEsYUFBYSxFQUFFLE1BQU0sQ0FBRTtBQUE1QixNQURzQixDQUF4QjtBQUdELEdBSlMsQ0FBVjtBQU1BTSxFQUFBQSxFQUFFLENBQUMsc0NBQUQs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ckMsQ0FBMkNNLGFBQWEsQ0FBQ0UsQ0FBRCxDQUFiLENBQWlCQyxPQUFqQixDQUF5QkMsS0FBcEUsQ0FERjtBQUdELEtBUkMsQ0FBRjtBQVVELEdBekJPLENBQVI7QUEwQkQsQ0ExRU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHAgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvQXBwLmpzJztcblxuZGVzY3JpYmUoJ0FwcCcsIGZ1bmN0aW9uKCkge1xuICB2YXIge1xuICAgIFNpbXVsYXRlLFxuICAgIHJlbmRlckludG9Eb2N1bWVudCxcbiAgICBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MsXG4gICAgc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzc1xuICB9ID0gUmVhY3RUZXN0VXRpbHM7XG5cbiAgdmFyIGFwcDtcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxBcHAgc2VhcmNoWW91VHViZT17KCkgPT4ge319Lz5cbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGEgc3RhdGVmdWwgY2xhc3MgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgc2luZ2xlIFZpZGVvUGxheWVyIGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWRlb1BsYXllciA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1wbGF5ZXInKTtcbiAgICBleHBlY3QodmlkZW9QbGF5ZXIpLnRvLmV4aXN0O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIHNpbmdsZSBWaWRlb0xpc3QgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZGVvTGlzdCA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0Jyk7XG4gICAgZXhwZWN0KHZpZGVvTGlzdCkudG8uZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdXBkYXRlIHRoZSB2aWRlbyBwbGF5ZXIgd2hlbiBhIHZpZGVvIGVudHJ5XFwncyB0aXRsZSBpcyBjbGlja2VkJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gVGhpcyB0ZXN0IHdpbGwgb25seSB3b3JrcyBvbmNlIGBBcHBgIGlzIHJlZmFjdG9yZWQgaW50byBhIHN0YXRlZnVsIGNsYXNzIGNvbXBvbmVudFxuICAgIC8vIGJlY2F1c2UgYHJlbmRlckludG9Eb2N1bWVudGAgZG9lcyBub3Qgd29yayB3aXRoIHN0YXRlbGVzcyBjbGFzcyBjb21wb25lbnRzXG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG5cbiAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcblxuICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSkgPT4ge1xuICAgICAgU2ltdWxhdGUuY2xpY2sodmlkZW9FbnRyeVRpdGxlKTtcbiAgICAgIHZhciBwbGF5ZXIgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tcGxheWVyJyk7XG4gICAgICB2YXIgcGxheWVyVGl0bGUgPSBwbGF5ZXIucXVlcnlTZWxlY3RvcignLnZpZGVvLXBsYXllci1kZXRhaWxzIGgzJyk7XG5cbiAgICAgIC8vIFRoaXMgdGVzdCBhc3N1bWVzIHRoYXQgaWYgeW91IGNhbiBzdWNjZXNzZnVsbHkgdXBkYXRlIHRoZSB2aWRlbyBwbGF5ZXIncyB0aXRsZSxcbiAgICAgIC8vIHlvdSBjYW4gYWxzbyB1cGRhdGUgdGhlIHZpZGVvIGFuZCBkZXNjcmlwdGlvblxuICAgICAgZXhwZWN0KHBsYXllclRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd3aGVuIHJlbmRlcmluZyBsaXZlIGRhdGEgZnJvbSBZb3VUdWJlJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaFlvdVR1YmVTdHViO1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViID0gc2lub24uc3R1YigpO1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIueWllbGRzKHdpbmRvdy5mYWtlVmlkZW9EYXRhKTtcbiAgICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgICAgPEFwcCBzZWFyY2hZb3VUdWJlPXtzZWFyY2hZb3VUdWJlU3R1Yn0gLz5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhbGwgYHNlYXJjaFlvdVR1YmVgIHdoZW4gYXBwIGlzIGluaXRpYWxpemVkJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3Qoc2VhcmNoWW91VHViZVN0dWIuY2FsbGVkKS50by5iZS50cnVlO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGxpdmUgZGF0YSB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KHNlYXJjaFlvdVR1YmVTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcblxuICAgICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG5cbiAgICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSwgaSkgPT5cbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKGZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgfSk7XG59KTtcbiJdfQ==