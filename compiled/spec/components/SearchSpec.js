import App from '../../src/components/App.js';
describe('Search', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = ReactTestUtils;
  var app, searchYouTubeStub;
  describe('when rendering live data from YouTube', function () {
    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.onCall(0).yields(window.fakeVideoData);
      searchYouTubeStub.onCall(1).yields(window.moreFakeVideoData);
      app = renderIntoDocument( /*#__PURE__*/React.createElement(App, {
        searchYouTube: searchYouTubeStub
      }));
    });
    it('should load live data when app is initialized', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });
    });
    it('should update the video list when typing into the input box', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });
      var searchInputElement = findRenderedDOMComponentWithClass(app, 'form-control');
      Simulate.change(searchInputElement, {
        target: {
          value: 'React tutorial'
        }
      });
      var newVideoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      newVideoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(moreFakeVideoData[i].snippet.title);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9TZWFyY2hTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0VGVzdFV0aWxzIiwiYXBwIiwic2VhcmNoWW91VHViZVN0dWIiLCJiZWZvcmVFYWNoIiwic2lub24iLCJzdHViIiwib25DYWxsIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsIm1vcmVGYWtlVmlkZW9EYXRhIiwiaXQiLCJ2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyIsImZvckVhY2giLCJ2aWRlb0VudHJ5VGl0bGUiLCJpIiwiZXhwZWN0IiwiaW5uZXJIVE1MIiwidG8iLCJlcXVhbCIsInNuaXBwZXQiLCJ0aXRsZSIsInNlYXJjaElucHV0RWxlbWVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwibmV3VmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEdBQVAsTUFBZ0IsNkJBQWhCO0FBRUFDLFFBQVEsQ0FBRSxRQUFGLEVBQVksWUFBVztBQUM3QixNQUFJO0FBQ0ZDLElBQUFBLFFBREU7QUFFRkMsSUFBQUEsa0JBRkU7QUFHRkMsSUFBQUEsaUNBSEU7QUFJRkMsSUFBQUE7QUFKRSxNQUtBQyxjQUxKO0FBT0EsTUFBSUMsR0FBSixFQUFTQyxpQkFBVDtBQUVBUCxFQUFBQSxRQUFRLENBQUMsdUNBQUQsRUFBMEMsWUFBVztBQUMzRFEsSUFBQUEsVUFBVSxDQUFDLFlBQVc7QUFDcEJELE1BQUFBLGlCQUFpQixHQUFHRSxLQUFLLENBQUNDLElBQU4sRUFBcEI7QUFDQUgsTUFBQUEsaUJBQWlCLENBQUNJLE1BQWxCLENBQXlCLENBQXpCLEVBQTRCQyxNQUE1QixDQUFtQ0MsTUFBTSxDQUFDQyxhQUExQztBQUNBUCxNQUFBQSxpQkFBaUIsQ0FBQ0ksTUFBbEIsQ0FBeUIsQ0FBekIsRUFBNEJDLE1BQTVCLENBQW1DQyxNQUFNLENBQUNFLGlCQUExQztBQUVBVCxNQUFBQSxHQUFHLEdBQUdKLGtCQUFrQixlQUN0QixvQkFBQyxHQUFEO0FBQUssUUFBQSxhQUFhLEVBQUVLO0FBQXBCLFFBRHNCLENBQXhCO0FBR0QsS0FSUyxDQUFWO0FBVUFTLElBQUFBLEVBQUUsQ0FBQywrQ0FBRCxFQUFrRCxZQUFXO0FBQzdELFVBQUlDLHVCQUF1QixHQUFHYixrQ0FBa0MsQ0FBQ0UsR0FBRCxFQUFNLHdCQUFOLENBQWhFO0FBQ0FXLE1BQUFBLHVCQUF1QixDQUFDQyxPQUF4QixDQUFnQyxDQUFDQyxlQUFELEVBQWtCQyxDQUFsQixLQUF3QjtBQUN0REMsUUFBQUEsTUFBTSxDQUFDRixlQUFlLENBQUNHLFNBQWpCLENBQU4sQ0FBa0NDLEVBQWxDLENBQXFDQyxLQUFyQyxDQUEyQ1YsYUFBYSxDQUFDTSxDQUFELENBQWIsQ0FBaUJLLE9BQWpCLENBQXlCQyxLQUFwRTtBQUNELE9BRkQ7QUFHRCxLQUxDLENBQUY7QUFPQVYsSUFBQUEsRUFBRSxDQUFDLDZEQUFELEVBQWdFLFlBQVc7QUFDM0UsVUFBSUMsdUJBQXVCLEdBQUdiLGtDQUFrQyxDQUFDRSxHQUFELEVBQU0sd0JBQU4sQ0FBaEU7QUFDQVcsTUFBQUEsdUJBQXVCLENBQUNDLE9BQXhCLENBQWdDLENBQUNDLGVBQUQsRUFBa0JDLENBQWxCLEtBQXdCO0FBQ3REQyxRQUFBQSxNQUFNLENBQUNGLGVBQWUsQ0FBQ0csU0FBakIsQ0FBTixDQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVixhQUFhLENBQUNNLENBQUQsQ0FBYixDQUFpQkssT0FBakIsQ0FBeUJDLEtBQXBFO0FBQ0QsT0FGRDtBQUlBLFVBQUlDLGtCQUFrQixHQUFHeEIsaUNBQWlDLENBQUNHLEdBQUQsRUFBTSxjQUFOLENBQTFEO0FBQ0FMLE1BQUFBLFFBQVEsQ0FBQzJCLE1BQVQsQ0FBZ0JELGtCQUFoQixFQUFvQztBQUFDRSxRQUFBQSxNQUFNLEVBQUU7QUFBQ0MsVUFBQUEsS0FBSyxFQUFFO0FBQVI7QUFBVCxPQUFwQztBQUVBLFVBQUlDLDBCQUEwQixHQUFHM0Isa0NBQWtDLENBQUNFLEdBQUQsRUFBTSx3QkFBTixDQUFuRTtBQUNBeUIsTUFBQUEsMEJBQTBCLENBQUNiLE9BQTNCLENBQW1DLENBQUNDLGVBQUQsRUFBa0JDLENBQWxCLEtBQXdCO0FBQ3pEQyxRQUFBQSxNQUFNLENBQUNGLGVBQWUsQ0FBQ0csU0FBakIsQ0FBTixDQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVCxpQkFBaUIsQ0FBQ0ssQ0FBRCxDQUFqQixDQUFxQkssT0FBckIsQ0FBNkJDLEtBQXhFO0FBQ0QsT0FGRDtBQUdELEtBYkMsQ0FBRjtBQWNELEdBaENPLENBQVI7QUFpQ0QsQ0EzQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHAgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvQXBwLmpzJztcblxuZGVzY3JpYmUgKCdTZWFyY2gnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHtcbiAgICBTaW11bGF0ZSxcbiAgICByZW5kZXJJbnRvRG9jdW1lbnQsXG4gICAgZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzLFxuICAgIHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3NcbiAgfSA9IFJlYWN0VGVzdFV0aWxzO1xuXG4gIHZhciBhcHAsIHNlYXJjaFlvdVR1YmVTdHViO1xuXG4gIGRlc2NyaWJlKCd3aGVuIHJlbmRlcmluZyBsaXZlIGRhdGEgZnJvbSBZb3VUdWJlJywgZnVuY3Rpb24oKSB7XG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViID0gc2lub24uc3R1YigpO1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIub25DYWxsKDApLnlpZWxkcyh3aW5kb3cuZmFrZVZpZGVvRGF0YSk7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1Yi5vbkNhbGwoMSkueWllbGRzKHdpbmRvdy5tb3JlRmFrZVZpZGVvRGF0YSk7XG5cbiAgICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgICAgPEFwcCBzZWFyY2hZb3VUdWJlPXtzZWFyY2hZb3VUdWJlU3R1Yn0gLz5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxvYWQgbGl2ZSBkYXRhIHdoZW4gYXBwIGlzIGluaXRpYWxpemVkJywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcbiAgICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSwgaSkgPT4ge1xuICAgICAgICBleHBlY3QodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwoZmFrZVZpZGVvRGF0YVtpXS5zbmlwcGV0LnRpdGxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIHZpZGVvIGxpc3Qgd2hlbiB0eXBpbmcgaW50byB0aGUgaW5wdXQgYm94JywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcbiAgICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSwgaSkgPT4ge1xuICAgICAgICBleHBlY3QodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwoZmFrZVZpZGVvRGF0YVtpXS5zbmlwcGV0LnRpdGxlKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc2VhcmNoSW5wdXRFbGVtZW50ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ2Zvcm0tY29udHJvbCcpO1xuICAgICAgU2ltdWxhdGUuY2hhbmdlKHNlYXJjaElucHV0RWxlbWVudCwge3RhcmdldDoge3ZhbHVlOiAnUmVhY3QgdHV0b3JpYWwnfX0pO1xuXG4gICAgICB2YXIgbmV3VmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcbiAgICAgIG5ld1ZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSwgaSkgPT4ge1xuICAgICAgICBleHBlY3QodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwobW9yZUZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==