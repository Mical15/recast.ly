import searchYouTube from '../../src/lib/searchYouTube.js';
import YOUTUBE_API_KEY from '../../src/config/youtube.js';
import exampleVideoData from '../../src/data/exampleVideoData.js';

var getURLSearchParams = function (url) {
  return url.split('?')[1].split('&').reduce((map, params) => {
    var [key, value] = params.split('=');
    map[key] = value;
    return map;
  }, {});
};

var hasSameShape = function (objectOne, objectTwo) {
  if (Object.keys(objectOne).length !== Object.keys(objectTwo).length) {
    return false;
  }

  for (var key in objectOne) {
    if (!key in objectTwo) {
      return false;
    }

    if (typeof objectOne[key] !== typeof objectTwo[key]) {
      return false;
    }

    if (Object.prototype.toString.call(objectOne[key]) === '[object Object]') {
      return hasSameShape(objectOne[key], objectTwo[key]);
    }
  }

  return true;
};

describe('searchYouTube', function () {
  var requests, xhr; // Sinon temporarily hijacks all outgoing AJAX requests with `useFakeXMLHttpRequest`
  // letting us synchronously inspect any request made by `searchYouTube`

  beforeEach(function () {
    requests = [];
    xhr = sinon.useFakeXMLHttpRequest();

    xhr.onCreate = function (req) {
      requests.push(req);
    };
  });
  afterEach(function () {
    if (xhr.restore) {
      xhr.restore();
    }
  });
  it('should send a GET request', function () {
    searchYouTube({}, () => {});
    expect(requests[0].method).to.equal('GET');
  });
  it('should accept `key`, `query`, and `max` options and send them in GET request', function () {
    searchYouTube({
      key: 'API_KEY',
      query: 'cats',
      max: 10
    }, () => {});
    var params = getURLSearchParams(requests[0].url);
    expect(params.key).to.equal('API_KEY');
    expect(params.q).to.equal('cats');
    expect(params.maxResults).to.equal('10');
  }); // Same shape means that the data should have the same keys, nested the same way as `exampleVideoData`,
  // though it will not necessarily have the same values.

  it('should GET videos with the same shape as `exampleVideoData`', function (done) {
    var options = {
      key: YOUTUBE_API_KEY,
      query: 'react',
      max: 5
    }; // We want this test to make a real AJAX request

    xhr.restore();
    searchYouTube(options, data => {
      console.log(data);
      expect(hasSameShape(data, exampleVideoData)).to.be.true;
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvbGliL3NlYXJjaFlvdVR1YmVTcGVjLmpzIl0sIm5hbWVzIjpbInNlYXJjaFlvdVR1YmUiLCJZT1VUVUJFX0FQSV9LRVkiLCJleGFtcGxlVmlkZW9EYXRhIiwiZ2V0VVJMU2VhcmNoUGFyYW1zIiwidXJsIiwic3BsaXQiLCJyZWR1Y2UiLCJtYXAiLCJwYXJhbXMiLCJrZXkiLCJ2YWx1ZSIsImhhc1NhbWVTaGFwZSIsIm9iamVjdE9uZSIsIm9iamVjdFR3byIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJkZXNjcmliZSIsInJlcXVlc3RzIiwieGhyIiwiYmVmb3JlRWFjaCIsInNpbm9uIiwidXNlRmFrZVhNTEh0dHBSZXF1ZXN0Iiwib25DcmVhdGUiLCJyZXEiLCJwdXNoIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsIml0IiwiZXhwZWN0IiwibWV0aG9kIiwidG8iLCJlcXVhbCIsInF1ZXJ5IiwibWF4IiwicSIsIm1heFJlc3VsdHMiLCJkb25lIiwib3B0aW9ucyIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwiYmUiLCJ0cnVlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxhQUFQLE1BQTBCLGdDQUExQjtBQUNBLE9BQU9DLGVBQVAsTUFBNEIsNkJBQTVCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsb0NBQTdCOztBQUVBLElBQUlDLGtCQUFrQixHQUFHLFVBQVNDLEdBQVQsRUFBYztBQUNyQyxTQUFPQSxHQUFHLENBQ1BDLEtBREksQ0FDRSxHQURGLEVBQ08sQ0FEUCxFQUVKQSxLQUZJLENBRUUsR0FGRixFQUdKQyxNQUhJLENBR0csQ0FBQ0MsR0FBRCxFQUFNQyxNQUFOLEtBQWlCO0FBQ3ZCLFFBQUksQ0FBQ0MsR0FBRCxFQUFNQyxLQUFOLElBQWVGLE1BQU0sQ0FBQ0gsS0FBUCxDQUFhLEdBQWIsQ0FBbkI7QUFDQUUsSUFBQUEsR0FBRyxDQUFDRSxHQUFELENBQUgsR0FBV0MsS0FB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QUNBOztBQUNBSixFQUFBQSxFQUFFLENBQUMsNkRBQUQsRUFBZ0UsVUFBU1MsSUFBVCxFQUFlO0FBQy9FLFFBQUlDLE9BQU8sR0FBRztBQUNaaEMsTUFBQUEsR0FBRyxFQUFFUixlQURPO0FBRVptQyxNQUFBQSxLQUFLLEVBQUUsT0FGSztBQUdaQyxNQUFBQSxHQUFHLEVBQUU7QUFITyxLQUFkLENBRCtFLENBTy9FOztBQUNBZixJQUFBQSxHQUFHLENBQUNRLE9BQUo7QUFFQTlCLElBQUFBLGFBQWEsQ0FBQ3lDLE9BQUQsRUFBV0MsSUFBRCxJQUFVO0FBQy9CQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBVixNQUFBQSxNQUFNLENBQUNyQixZQUFZLENBQUMrQixJQUFELEVBQU94QyxnQkFBUCxDQUFiLENBQU4sQ0FBNkNnQyxFQUE3QyxDQUFnRFcsRUFBaEQsQ0FBbURDLElBQW5EO0FBQ0FOLE1BQUFBLElBQUk7QUFDTCxLQUpZLENBQWI7QUFLRCxHQWZDLENBQUY7QUFnQkQsQ0FuRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZWFyY2hZb3VUdWJlIGZyb20gJy4uLy4uL3NyYy9saWIvc2VhcmNoWW91VHViZS5qcyc7XG5pbXBvcnQgWU9VVFVCRV9BUElfS0VZIGZyb20gJy4uLy4uL3NyYy9jb25maWcveW91dHViZS5qcyc7XG5pbXBvcnQgZXhhbXBsZVZpZGVvRGF0YSBmcm9tICcuLi8uLi9zcmMvZGF0YS9leGFtcGxlVmlkZW9EYXRhLmpzJztcblxudmFyIGdldFVSTFNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uKHVybCkge1xuICByZXR1cm4gdXJsXG4gICAgLnNwbGl0KCc/JylbMV1cbiAgICAuc3BsaXQoJyYnKVxuICAgIC5yZWR1Y2UoKG1hcCwgcGFyYW1zKSA9PiB7XG4gICAgICB2YXIgW2tleSwgdmFsdWVdID0gcGFyYW1zLnNwbGl0KCc9Jyk7XG4gICAgICBtYXBba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LCB7fSk7XG59O1xuXG52YXIgaGFzU2FtZVNoYXBlID0gZnVuY3Rpb24ob2JqZWN0T25lLCBvYmplY3RUd28pIHtcbiAgaWYgKE9iamVjdC5rZXlzKG9iamVjdE9uZSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmplY3RUd28pLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3RPbmUpIHtcbiAgICBpZiAoIWtleSBpbiBvYmplY3RUd28pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iamVjdE9uZVtrZXldICE9PSB0eXBlb2Ygb2JqZWN0VHdvW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdE9uZVtrZXldKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIHJldHVybiBoYXNTYW1lU2hhcGUob2JqZWN0T25lW2tleV0sIG9iamVjdFR3b1trZXldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmRlc2NyaWJlKCdzZWFyY2hZb3VUdWJlJywgZnVuY3Rpb24oKSB7XG4gIHZhciByZXF1ZXN0cywgeGhyO1xuXG4gIC8vIFNpbm9uIHRlbXBvcmFyaWx5IGhpamFja3MgYWxsIG91dGdvaW5nIEFKQVggcmVxdWVzdHMgd2l0aCBgdXNlRmFrZVhNTEh0dHBSZXF1ZXN0YFxuICAvLyBsZXR0aW5nIHVzIHN5bmNocm9ub3VzbHkgaW5zcGVjdCBhbnkgcmVxdWVzdCBtYWRlIGJ5IGBzZWFyY2hZb3VUdWJlYFxuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgcmVxdWVzdHMgPSBbXTtcbiAgICB4aHIgPSBzaW5vbi51c2VGYWtlWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub25DcmVhdGUgPSBmdW5jdGlvbihyZXEpIHsgcmVxdWVzdHMucHVzaChyZXEpOyB9O1xuICB9KTtcblxuICBhZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gICAgaWYgKHhoci5yZXN0b3JlKSB7XG4gICAgICB4aHIucmVzdG9yZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZW5kIGEgR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHtcbiAgICBzZWFyY2hZb3VUdWJlKHt9LCAoKSA9PiB7fSk7XG5cbiAgICBleHBlY3QocmVxdWVzdHNbMF0ubWV0aG9kKS50by5lcXVhbCgnR0VUJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYWNjZXB0IGBrZXlgLCBgcXVlcnlgLCBhbmQgYG1heGAgb3B0aW9ucyBhbmQgc2VuZCB0aGVtIGluIEdFVCByZXF1ZXN0JywgZnVuY3Rpb24oKSB7XG4gICAgc2VhcmNoWW91VHViZSh7IGtleTogJ0FQSV9LRVknLCBxdWVyeTogJ2NhdHMnLCBtYXg6IDEwIH0sICgpID0+IHt9KTtcblxuICAgIHZhciBwYXJhbXMgPSBnZXRVUkxTZWFyY2hQYXJhbXMocmVxdWVzdHNbMF0udXJsKTtcbiAgICBleHBlY3QocGFyYW1zLmtleSkudG8uZXF1YWwoJ0FQSV9LRVknKTtcbiAgICBleHBlY3QocGFyYW1zLnEpLnRvLmVxdWFsKCdjYXRzJyk7XG4gICAgZXhwZWN0KHBhcmFtcy5tYXhSZXN1bHRzKS50by5lcXVhbCgnMTAnKTtcbiAgfSk7XG5cbiAgLy8gU2FtZSBzaGFwZSBtZWFucyB0aGF0IHRoZSBkYXRhIHNob3VsZCBoYXZlIHRoZSBzYW1lIGtleXMsIG5lc3RlZCB0aGUgc2FtZSB3YXkgYXMgYGV4YW1wbGVWaWRlb0RhdGFgLFxuICAvLyB0aG91Z2ggaXQgd2lsbCBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0aGUgc2FtZSB2YWx1ZXMuXG4gIGl0KCdzaG91bGQgR0VUIHZpZGVvcyB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBleGFtcGxlVmlkZW9EYXRhYCcsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGtleTogWU9VVFVCRV9BUElfS0VZLFxuICAgICAgcXVlcnk6ICdyZWFjdCcsXG4gICAgICBtYXg6IDVcbiAgICB9O1xuXG4gICAgLy8gV2Ugd2FudCB0aGlzIHRlc3QgdG8gbWFrZSBhIHJlYWwgQUpBWCByZXF1ZXN0XG4gICAgeGhyLnJlc3RvcmUoKTtcblxuICAgIHNlYXJjaFlvdVR1YmUob3B0aW9ucywgKGRhdGEpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgZXhwZWN0KGhhc1NhbWVTaGFwZShkYXRhLCBleGFtcGxlVmlkZW9EYXRhKSkudG8uYmUudHJ1ZTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXX0=